{"org.apache.commons.math.distribution.FDistributionImpl::void <init>(double,double):::specialinvoke this.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>()":1,"org.apache.commons.math.distribution.FDistributionImpl::double inverseCumulativeProbability(double):::return #Infinity":24,"org.apache.commons.math.distribution.FDistributionImpl::double inverseCumulativeProbability(double):::if $stack3 != 0 goto $stack4 = p cmpl 1.0":20,"org.apache.commons.math.distribution.FDistributionImpl::double getDomainLowerBound(double):::return 0.0":27,"org.apache.commons.math.distribution.FDistributionImpl::double getInitialDomain(double):::d = virtualinvoke this.<org.apache.commons.math.distribution.FDistributionImpl: double getDenominatorDegreesOfFreedom()>()":30,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::$stack16 = 0.5 * n":15,"org.apache.commons.math.distribution.FDistributionImpl::double getInitialDomain(double):::ret = 1.0":29,"org.apache.commons.math.distribution.FDistributionImpl::double getInitialDomain(double):::$stack9 = d - 2.0":33,"org.apache.commons.math.distribution.FDistributionImpl::void <init>(double,double):::virtualinvoke this.<org.apache.commons.math.distribution.FDistributionImpl: void setNumeratorDegreesOfFreedom(double)>(numeratorDegreesOfFreedom)":2,"org.apache.commons.math.distribution.FDistributionImpl::double inverseCumulativeProbability(double):::return $stack5":26,"org.apache.commons.math.distribution.FDistributionImpl::void setNumeratorDegreesOfFreedom(double):::specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"degrees of freedom must be positive.\")":39,"org.apache.commons.math.distribution.FDistributionImpl::double getInitialDomain(double):::$stack8 = d cmpl 2.0":31,"org.apache.commons.math.distribution.FDistributionImpl::void setNumeratorDegreesOfFreedom(double):::this.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom> = degreesOfFreedom":41,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::ret = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double)>($stack17, $stack16, $stack15)":17,"org.apache.commons.math.distribution.FDistributionImpl::void setNumeratorDegreesOfFreedom(double):::$stack3 = degreesOfFreedom cmpg 0.0":36,"org.apache.commons.math.distribution.FDistributionImpl::double getDenominatorDegreesOfFreedom():::return $stack1":53,"org.apache.commons.math.distribution.FDistributionImpl::void setNumeratorDegreesOfFreedom(double):::throw $stack4":40,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::ret = 0.0":7,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::$stack15 = 0.5 * m":16,"org.apache.commons.math.distribution.FDistributionImpl::double inverseCumulativeProbability(double):::$stack5 = specialinvoke this.<org.apache.commons.math.distribution.AbstractContinuousDistribution: double inverseCumulativeProbability(double)>(p)":25,"org.apache.commons.math.distribution.FDistributionImpl::double getInitialDomain(double):::return ret":35,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::n = virtualinvoke this.<org.apache.commons.math.distribution.FDistributionImpl: double getNumeratorDegreesOfFreedom()>()":9,"org.apache.commons.math.distribution.FDistributionImpl::void setNumeratorDegreesOfFreedom(double):::return":42,"org.apache.commons.math.distribution.FDistributionImpl::void setDenominatorDegreesOfFreedom(double):::this.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom> = degreesOfFreedom":50,"org.apache.commons.math.distribution.FDistributionImpl::void setDenominatorDegreesOfFreedom(double):::return":51,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::$stack9 = x cmpg 0.0":5,"org.apache.commons.math.distribution.FDistributionImpl::void setDenominatorDegreesOfFreedom(double):::specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"degrees of freedom must be positive.\")":48,"org.apache.commons.math.distribution.FDistributionImpl::void setDenominatorDegreesOfFreedom(double):::$stack3 = degreesOfFreedom cmpg 0.0":45,"org.apache.commons.math.distribution.FDistributionImpl::void setDenominatorDegreesOfFreedom(double):::$stack4 = new java.lang.IllegalArgumentException":47,"org.apache.commons.math.distribution.FDistributionImpl::double inverseCumulativeProbability(double):::return 0.0":21,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::if $stack9 > 0 goto n = virtualinvoke this.<org.apache.commons.math.distribution.FDistributionImpl: double getNumeratorDegreesOfFreedom()>()":6,"org.apache.commons.math.distribution.FDistributionImpl::double inverseCumulativeProbability(double):::$stack3 = p cmpl 0.0":19,"org.apache.commons.math.distribution.FDistributionImpl::double inverseCumulativeProbability(double):::$stack4 = p cmpl 1.0":22,"org.apache.commons.math.distribution.FDistributionImpl::void setDenominatorDegreesOfFreedom(double):::if $stack3 > 0 goto this.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom> = degreesOfFreedom":46,"org.apache.commons.math.distribution.FDistributionImpl::void <init>(double,double):::virtualinvoke this.<org.apache.commons.math.distribution.FDistributionImpl: void setDenominatorDegreesOfFreedom(double)>(denominatorDegreesOfFreedom)":3,"org.apache.commons.math.distribution.FDistributionImpl::double getDomainUpperBound(double):::return 1.7976931348623157E308":28,"org.apache.commons.math.distribution.FDistributionImpl::void setNumeratorDegreesOfFreedom(double):::$stack4 = new java.lang.IllegalArgumentException":38,"org.apache.commons.math.distribution.FDistributionImpl::double inverseCumulativeProbability(double):::if $stack4 != 0 goto $stack5 = specialinvoke this.<org.apache.commons.math.distribution.AbstractContinuousDistribution: double inverseCumulativeProbability(double)>(p)":23,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::$stack12 = n * x":12,"org.apache.commons.math.distribution.FDistributionImpl::double getDenominatorDegreesOfFreedom():::$stack1 = this.<org.apache.commons.math.distribution.FDistributionImpl: double denominatorDegreesOfFreedom>":52,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::m = virtualinvoke this.<org.apache.commons.math.distribution.FDistributionImpl: double getDenominatorDegreesOfFreedom()>()":10,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::$stack17 = $stack14 \/ $stack13":14,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::goto [?= return ret]":8,"org.apache.commons.math.distribution.FDistributionImpl::void <init>(double,double):::return":4,"org.apache.commons.math.distribution.FDistributionImpl::void setDenominatorDegreesOfFreedom(double):::throw $stack4":49,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::$stack13 = m + $stack12":13,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::$stack14 = n * x":11,"org.apache.commons.math.distribution.FDistributionImpl::double cumulativeProbability(double):::return ret":18,"org.apache.commons.math.distribution.FDistributionImpl::double getInitialDomain(double):::if $stack8 <= 0 goto return ret":32,"org.apache.commons.math.distribution.FDistributionImpl::double getNumeratorDegreesOfFreedom():::$stack1 = this.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom>":43,"org.apache.commons.math.distribution.FDistributionImpl::double getNumeratorDegreesOfFreedom():::return $stack1":44,"org.apache.commons.math.distribution.FDistributionImpl::double getInitialDomain(double):::ret = d \/ $stack9":34,"org.apache.commons.math.distribution.FDistributionImpl::void setNumeratorDegreesOfFreedom(double):::if $stack3 > 0 goto this.<org.apache.commons.math.distribution.FDistributionImpl: double numeratorDegreesOfFreedom> = degreesOfFreedom":37}